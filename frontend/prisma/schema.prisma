// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
   output = "../../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @map("_id") @db.ObjectId
  firstName String?
  lastName  String?
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sex            Boolean
  age            Int
  height         Int
  weight         Int
  activityLevel  ActivityLevel
  allergies      Allergy[]
  medications    Medication[]
  healthIssues   HealthIssue[]
  diet           Diet[]
  additionalInfo String?
  heartRate      Int?
  bloodPressure  String?
  isDoctor       Boolean       @default(false)

  // Relations
  sentReports    Report[]  @relation("PatientReports")
  receivedReports Report[] @relation("DoctorReports")
}

model ObfuscatedUser {
  id             String        @id @map("_id") @db.ObjectId
  userId         String        @db.ObjectId
  age            Int?
  sex            Boolean?
  activityLevel  ActivityLevel?
  allergies      Allergy[]
  healthIssues   HealthIssue[]
  diet           Diet[]

  // Relations
  reports        Report[]
}

model Report {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  createdAt      DateTime      @default(now())
  status         ReportStatus  @default(PENDING)

  // Patient (anonymized)
  obfuscatedUser ObfuscatedUser @relation(fields: [obfuscatedUserId], references: [id])
  obfuscatedUserId String       @db.ObjectId

  // Original patient (for internal reference)
  patient        User          @relation("PatientReports", fields: [patientId], references: [id])
  patientId      String        @db.ObjectId

  // Doctor receiving the report
  doctor         User          @relation("DoctorReports", fields: [doctorId], references: [id])
  doctorId       String        @db.ObjectId
}

enum ActivityLevel {
  LOW
  MEDIUM
  HIGH
}

enum Allergy {
  GLUTEN
  LACTOSE
  NUTS
  SEAFOOD
  DAIRY
  EGGS
  SOY
  PEANUTS
  POLLEN
  LATEX
  OTHER
}

enum Medication {
  ASPIRIN
  IBUPROFEN
  ANTIBIOTICS
  BLOOD_PRESSURE_MEDICATION
  INSULIN
  OTHER
}

enum HealthIssue {
  DIABETES
  HEART_DISEASE
  HIGH_BLOOD_PRESSURE
  ASTHMA
  CANCER
  OTHER
}

enum Diet {
  VEGETARIAN
  VEGAN
  KETO
  PALEO
  MEDITERRANEAN
  GLUTEN_FREE
  DAIRY_FREE
  LOW_CARB
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESPONDED
}

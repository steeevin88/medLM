// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Patient {
  id        String   @id @map("_id")
  firstName String?
  lastName  String?
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sex            Boolean
  age            Int
  height         Int
  weight         Int
  activityLevel  ActivityLevel
  allergies      Allergy[]
  medications    Medication[]
  healthIssues   HealthIssue[]
  diet           Diet[]
  additionalInfo String?
  heartRate      Int?
  bloodPressure  String?

  // Relations
  sentReports Report[] @relation("PatientReports")
}

model Doctor {
  id        String   @id @map("_id")
  firstName String?
  lastName  String?
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sex             Boolean
  age             Int
  location        String
  fieldOfStudy    String
  specialization  String?
  yearsExperience Int?
  licenseNumber   String?
  hospital        String?
  bio             String?

  // Relations
  receivedReports Report[] @relation("DoctorReports")
}

model ObfuscatedUser {
  id            String         @id @map("_id")
  userId        String
  age           Int?
  sex           Boolean?
  activityLevel ActivityLevel?
  allergies     Allergy[]
  healthIssues  HealthIssue[]
  diet          Diet[]

  // This model is now created for a single report
  report   Report? @relation(fields: [reportId], references: [id])
  reportId String? @unique @db.ObjectId
}

model Report {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime     @default(now())
  status    ReportStatus @default(PENDING)

  // Patient (anonymized) - now a one-to-one relation
  obfuscatedUser ObfuscatedUser?

  // Original patient (for internal reference)
  patient   Patient @relation("PatientReports", fields: [patientId], references: [id])
  patientId String

  // Doctor receiving the report
  doctor   Doctor @relation("DoctorReports", fields: [doctorId], references: [id])
  doctorId String
}

enum ActivityLevel {
  SEDENTARY
  LIGHT
  MODERATE
  ACTIVE
  VERYACTIVE
}

enum Allergy {
  GLUTEN
  LACTOSE
  NUTS
  SEAFOOD
  DAIRY
  EGGS
  SOY
  PEANUTS
  POLLEN
  LATEX
  OTHER
}

enum Medication {
  PAIN_KILLERS
  ANTIHISTAMINES
  ANTIDEPRESSANTS
  ANTIBIOTICS
  BLOOD_PRESSURE_MEDICATION
  BLOOD_THINNERS
  INSULIN
  OTHER
}

enum HealthIssue {
  DIABETES
  HEART_DISEASE
  HIGH_BLOOD_PRESSURE
  ASTHMA
  CANCER
  OTHER
}

enum Diet {
  VEGAN
  VEGETARIAN
  MEDITERRANEAN
  GLUTEN_FREE
  DAIRY_FREE
  LOW_CARB
  REGULAR
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESPONDED
}

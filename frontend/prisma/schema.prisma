// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Patient {
  id        String   @id @map("_id")
  firstName String?
  lastName  String?
  email     String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sex            Boolean
  age            Int
  height         Int
  weight         Int
  activityLevel  ActivityLevel
  allergies      Allergy[]
  medications    Medication[]
  healthIssues   HealthIssue[]
  diet           Diet[]
  additionalInfo String?
  heartRate      Int?
  bloodPressure  String?

  // Relations
  sentReports    Report[]          @relation("PatientReports")
  appointments   Appointment[]     @relation("PatientAppointments")
  labTests       LabTest[]         @relation("PatientLabTests")
  conversations  Conversation[]    @relation("PatientConversations")
  sentMessages   Message[]         @relation("PatientMessages")
}

model Doctor {
  id             String   @id @map("_id")
  firstName      String?
  lastName       String?
  email          String?  @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  sex            Boolean
  age            Int
  location       String
  fieldOfStudy   String
  specialization String?
  yearsExperience Int?
  licenseNumber  String?
  hospital       String?
  bio            String?

  // Relations
  receivedReports Report[]        @relation("DoctorReports")
  appointments    Appointment[]   @relation("DoctorAppointments")
  conversations   Conversation[]  @relation("DoctorConversations")
  sentMessages    Message[]       @relation("DoctorMessages")
}

model ObfuscatedUser {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  age            Int?
  sex            Boolean?
  activityLevel  ActivityLevel?
  allergies      Allergy[]
  healthIssues   HealthIssue[]
  diet           Diet[]

  // This model is now created for a single report
  report         Report?       @relation(fields: [reportId], references: [id])
  reportId       String?       @unique @db.ObjectId
  
  // Anonymous relations
  conversations  Conversation[] @relation("AnonymousConversations")
  labTests       LabTest[]      @relation("AnonymousLabTests")
  appointments   Appointment[]  @relation("AnonymousAppointments")
}

model Report {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  createdAt      DateTime      @default(now())
  status         ReportStatus  @default(PENDING)

  // Patient (anonymized) - now a one-to-one relation
  obfuscatedUser ObfuscatedUser?

  // Original patient (for internal reference)
  patient        Patient        @relation("PatientReports", fields: [patientId], references: [id])
  patientId      String

  // Doctor receiving the report
  doctor         Doctor         @relation("DoctorReports", fields: [doctorId], references: [id])
  doctorId       String
}

model Appointment {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Appointment details
  date           DateTime
  time           String
  location       String
  address        String?
  notes          String?
  type           AppointmentType
  status         AppointmentStatus @default(REQUESTED)
  isAnonymous    Boolean           @default(false)
  specialtyType  String?
  
  // Relations
  patient        Patient       @relation("PatientAppointments", fields: [patientId], references: [id])
  patientId      String
  
  doctor         Doctor        @relation("DoctorAppointments", fields: [doctorId], references: [id])
  doctorId       String
  
  // Optional obfuscated user if anonymous
  obfuscatedUser ObfuscatedUser? @relation("AnonymousAppointments", fields: [obfuscatedUserId], references: [id])
  obfuscatedUserId String?
  
  // Conversation associated with this appointment
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?       @db.ObjectId
}

model LabTest {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Lab test details
  testName       String
  date           DateTime
  time           String
  location       String
  address        String?
  reason         String?
  status         LabTestStatus @default(SCHEDULED)
  isAnonymous    Boolean       @default(false)
  results        String?
  
  // Relations
  patient        Patient       @relation("PatientLabTests", fields: [patientId], references: [id])
  patientId      String
  
  orderedBy      String        // Name of doctor who ordered the test
  
  // Optional obfuscated user if anonymous
  obfuscatedUser ObfuscatedUser? @relation("AnonymousLabTests", fields: [obfuscatedUserId], references: [id])
  obfuscatedUserId String?
}

model Conversation {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  // Conversation details
  title          String?
  isAnonymous    Boolean       @default(false)
  
  // Relations
  patient        Patient       @relation("PatientConversations", fields: [patientId], references: [id])
  patientId      String
  
  doctor         Doctor        @relation("DoctorConversations", fields: [doctorId], references: [id])
  doctorId       String
  
  // Optional obfuscated user if anonymous
  obfuscatedUser ObfuscatedUser? @relation("AnonymousConversations", fields: [obfuscatedUserId], references: [id])
  obfuscatedUserId String?
  
  // Messages in this conversation
  messages       Message[]
  
  // Related appointment (if any)
  appointments   Appointment[]
}

model Message {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime      @default(now())
  
  // Message content
  content        String
  isRead         Boolean       @default(false)
  
  // Who sent the message
  sentByPatient  Boolean       @default(false)
  sentByDoctor   Boolean       @default(false)
  
  // Relations
  patient        Patient?      @relation("PatientMessages", fields: [patientId], references: [id])
  patientId      String?
  
  doctor         Doctor?       @relation("DoctorMessages", fields: [doctorId], references: [id])
  doctorId       String?
  
  // Conversation this message belongs to
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String        @db.ObjectId
}

enum ActivityLevel {
  LOW
  MEDIUM
  HIGH
}

enum Allergy {
  GLUTEN
  LACTOSE
  NUTS
  SEAFOOD
  DAIRY
  EGGS
  SOY
  PEANUTS
  POLLEN
  LATEX
  OTHER
}

enum Medication {
  ASPIRIN
  IBUPROFEN
  ANTIBIOTICS
  BLOOD_PRESSURE_MEDICATION
  INSULIN
  OTHER
}

enum HealthIssue {
  DIABETES
  HEART_DISEASE
  HIGH_BLOOD_PRESSURE
  ASTHMA
  CANCER
  OTHER
}

enum Diet {
  VEGETARIAN
  VEGAN
  KETO
  PALEO
  MEDITERRANEAN
  GLUTEN_FREE
  DAIRY_FREE
  LOW_CARB
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESPONDED
}

enum AppointmentType {
  IN_PERSON
  VIDEO
  PHONE
}

enum AppointmentStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
  COMPLETED
  RESCHEDULED
}

enum LabTestStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESULTS_READY
}
